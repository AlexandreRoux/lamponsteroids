# Set Apache Root directory
#
- name: Set Apache root directory
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerRoot {{ httpd_install_path }}"
    state: present
    regexp: '^#?ServerRoot'
  notify: restart httpd
  tags: [httpd, configure]



# Set Apache port
#
- name: Set Apache port
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Listen {{ httpd_port }}"
    state: present
    regexp: '^#?Listen'
  notify: restart httpd
  tags: [httpd, configure]






# Enable required Apache modules
#
- name: Enable required modules
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "LoadModule {{ item }}_module modules/mod_{{ item }}.so"
    state: present
    insertbefore: "<IfModule unixd_module>"
  with_items: "{{ httpd_active_modules }}"
  notify: restart httpd
  tags: [httpd, configure]

- name: Disable all other modules
  lineinfile:
    dest: "{{ httpd_config_file }}"
    regexp: "LoadModule (?!{{ httpd_active_modules | join('|') }})"
    state: absent
  notify: restart httpd
  tags: [httpd, configure]


# Make sure that dedicated Apache group exists
#
- name: Create dedicated Apache httpd group
  group:
    name: "{{ httpd_group }}"
    state: present
  tags: [httpd, configure]


# Make sure that dedicated Apache user exists
#
- name: Create dedicated Apache httpd user
  user:
    name: "{{ httpd_user }}"
    createhome: no
    group: "{{ httpd_group }}"
    state: present
    shell: /sbin/nologin
  tags: [httpd, configure]


- name: Set Apache httpd user
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "User {{ httpd_user }}"
    state: present
    regexp: '^#?User'
  notify: restart httpd
  tags: [httpd, configure]

- name: Set Apache httpd group
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Group {{ httpd_group }}"
    state: present
    regexp: '^#?Group'
  notify: restart httpd
  tags: [httpd, configure]

# Set Apache ServerName
#
- name: Set Apache httpd server name
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerName {{ httpd_server_name }}"
    state: present
    regexp: '^#?ServerName'
  notify: restart httpd
  tags: [httpd, configure]

- name: Set Apache httpd server name
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerTokens {{ httpd_server_tokens }}"
    state: present
    regexp: '^#?ServerTokens'
    insertbefore: EOF
  notify: restart httpd
  tags: [httpd, configure]

- name: Set Apache httpd server name
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "ServerSignature {{ httpd_server_signature }}"
    state: present
    insertbefore: EOF
    regexp: '^#?ServerSignature'
  notify: restart httpd
  tags: [httpd, configure]

- name: Set Apache httpd etag name
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "FileETag {{ httpd_file_etag }}"
    state: present
    insertbefore: EOF
    regexp: '^#?FileETag'
  notify: restart httpd
  tags: [httpd, configure]




- name: Make sure that MPM is enabled
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "Include conf/extra/httpd-mpm.conf"
    state: present
    regexp: '^#?Include\ conf\/extra/\httpd-mpm'
  notify: restart httpd
  tags: [httpd, configure]


- name: Make sure that MPM Start server
  replace:
    dest: "{{ httpd_install_path }}/conf/extra/httpd-mpm.conf"
    replace: "    {{ item.key }}  {{ item.value }}"
    regexp: '^[ \t]+{{ item.key }}(.+)$'
  notify: restart httpd
  with_items: "{{ httpd_mpm_config }}"
  tags: [httpd, configure]


- name: Set Directory index
  lineinfile:
    dest: "{{ httpd_config_file }}"
    line: "DirectoryIndex {{ httpd_directory_index }}"
    state: present
    regexp: '^[ \t]+DirectoryIndex'
  notify: restart httpd
  tags: [httpd, configure]
