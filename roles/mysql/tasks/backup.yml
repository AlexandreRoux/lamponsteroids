# Create database backup user and grand him permissions to database for backup
#
- name: Create user for backups
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ mysql_backup_user }}"
    password: "{{ mysql_backup_user_password }}"
    state: present
    priv: "{{ mysql_backup_databases|map(attribute='database') | map('regex_replace', '(.*)', '\\1.*:SELECT') | join('/') }}"
  tags: [mysql, backup]



# Create .my.cnf file with backup user database credentials
#
- name: Create .my.cnf with database backup user credentials
  template:
    src: my.cnf.j2
    dest: "/root/.my.cnf"
    owner: root
    group: root
    mode: 0600
  tags: [mysql, backup]



# Make sure that backup directory exists
#
- name: Make sure that backup directory exists
  file:
    path: "{{ item.backup_directory }}"
    state: directory
    mode: "2775"
    owner: "{{ item.backup_directory_owner }}"
    group: "{{ item.backup_directory_group }}"
  with_items: "{{ mysql_backup_databases }}"
  tags: [mysql, backup]



# Place backup script in place for each database
#
- name: Setup backup scripts
  template:
    src: backup-script.sh.j2
    dest: "{{ item.backup_directory }}/{{ item.database }}-backup.sh"
    owner: "{{ item.backup_directory_owner }}"
    group: "{{ item.backup_directory_group }}"
    mode: 0700
  with_items: "{{ mysql_backup_databases }}"
  tags: [mysql, backup]



# Setup cronjob for backups
#
- name: Setup crontab for periodical backups
  cron:
    name: "{{ item.database }} backup"
    special_time: "{{ item.backup_frequency }}"
    job: "bash {{ item.backup_directory }}/{{ item.database }}-backup.sh >> {{ item.backup_directory }}/{{ item.database }}-backup.log 2>&1"
  with_items: "{{ mysql_backup_databases }}"
  tags: [mysql, backup]
